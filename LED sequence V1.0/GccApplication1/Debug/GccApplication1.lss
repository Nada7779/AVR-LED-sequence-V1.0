
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005b4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000608  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000608  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000638  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000674  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d3c  00000000  00000000  0000071c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006c3  00000000  00000000  00001458  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005c0  00000000  00000000  00001b1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f0  00000000  00000000  000020dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000377  00000000  00000000  000021cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000772  00000000  00000000  00002543  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00002cb5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 d6 01 	call	0x3ac	; 0x3ac <main>
  64:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Button_init>:

#include "button.h"
 
 // initialize
 void Button_init(uint8_t buttonPort, uint8_t buttonPin) // init button as an input device
 {
  6c:	98 2f       	mov	r25, r24
  6e:	86 2f       	mov	r24, r22
	 DIO_init(buttonPin, buttonPort, IN);
  70:	40 e0       	ldi	r20, 0x00	; 0
  72:	69 2f       	mov	r22, r25
  74:	0e 94 43 00 	call	0x86	; 0x86 <DIO_init>
  78:	08 95       	ret

0000007a <Button_read>:
 }

 // button read
 void Button_read(uint8_t buttonPort, uint8_t buttonPin, uint8_t *value)
 {
  7a:	98 2f       	mov	r25, r24
  7c:	86 2f       	mov	r24, r22
	 DIO_read(buttonPin, buttonPort, value);
  7e:	69 2f       	mov	r22, r25
  80:	0e 94 59 01 	call	0x2b2	; 0x2b2 <DIO_read>
  84:	08 95       	ret

00000086 <DIO_init>:

// function definitions

void DIO_init(uint8_t pinNumber, uint8_t portNumber, uint8_t direction)
{
	switch(portNumber)
  86:	62 34       	cpi	r22, 0x42	; 66
  88:	59 f1       	breq	.+86     	; 0xe0 <DIO_init+0x5a>
  8a:	18 f4       	brcc	.+6      	; 0x92 <DIO_init+0xc>
  8c:	61 34       	cpi	r22, 0x41	; 65
  8e:	41 f0       	breq	.+16     	; 0xa0 <DIO_init+0x1a>
  90:	08 95       	ret
  92:	63 34       	cpi	r22, 0x43	; 67
  94:	09 f4       	brne	.+2      	; 0x98 <DIO_init+0x12>
  96:	44 c0       	rjmp	.+136    	; 0x120 <DIO_init+0x9a>
  98:	64 34       	cpi	r22, 0x44	; 68
  9a:	09 f4       	brne	.+2      	; 0x9e <DIO_init+0x18>
  9c:	60 c0       	rjmp	.+192    	; 0x15e <DIO_init+0xd8>
  9e:	08 95       	ret
	{
		case PORT_A: 
		if(direction==IN)
  a0:	41 11       	cpse	r20, r1
  a2:	0e c0       	rjmp	.+28     	; 0xc0 <DIO_init+0x3a>
		{
			DDRA &= ~(1<<pinNumber); // pin init. input
  a4:	4a b3       	in	r20, 0x1a	; 26
  a6:	21 e0       	ldi	r18, 0x01	; 1
  a8:	30 e0       	ldi	r19, 0x00	; 0
  aa:	b9 01       	movw	r22, r18
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <DIO_init+0x2c>
  ae:	66 0f       	add	r22, r22
  b0:	77 1f       	adc	r23, r23
  b2:	8a 95       	dec	r24
  b4:	e2 f7       	brpl	.-8      	; 0xae <DIO_init+0x28>
  b6:	cb 01       	movw	r24, r22
  b8:	80 95       	com	r24
  ba:	84 23       	and	r24, r20
  bc:	8a bb       	out	0x1a, r24	; 26
  be:	08 95       	ret
	    }
		else if(direction==OUT)
  c0:	41 30       	cpi	r20, 0x01	; 1
  c2:	09 f0       	breq	.+2      	; 0xc6 <DIO_init+0x40>
  c4:	6a c0       	rjmp	.+212    	; 0x19a <DIO_init+0x114>
		{
			DDRA |= (1<<pinNumber); // pin init. output
  c6:	4a b3       	in	r20, 0x1a	; 26
  c8:	21 e0       	ldi	r18, 0x01	; 1
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	b9 01       	movw	r22, r18
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <DIO_init+0x4e>
  d0:	66 0f       	add	r22, r22
  d2:	77 1f       	adc	r23, r23
  d4:	8a 95       	dec	r24
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <DIO_init+0x4a>
  d8:	cb 01       	movw	r24, r22
  da:	84 2b       	or	r24, r20
  dc:	8a bb       	out	0x1a, r24	; 26
  de:	08 95       	ret
			// Error handling
		}
	    break;
	    
		case PORT_B:
		if(direction==IN)
  e0:	41 11       	cpse	r20, r1
  e2:	0e c0       	rjmp	.+28     	; 0x100 <DIO_init+0x7a>
		{
			DDRB &= ~(1<<pinNumber); // pin init. input
  e4:	47 b3       	in	r20, 0x17	; 23
  e6:	21 e0       	ldi	r18, 0x01	; 1
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	b9 01       	movw	r22, r18
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <DIO_init+0x6c>
  ee:	66 0f       	add	r22, r22
  f0:	77 1f       	adc	r23, r23
  f2:	8a 95       	dec	r24
  f4:	e2 f7       	brpl	.-8      	; 0xee <DIO_init+0x68>
  f6:	cb 01       	movw	r24, r22
  f8:	80 95       	com	r24
  fa:	84 23       	and	r24, r20
  fc:	87 bb       	out	0x17, r24	; 23
  fe:	08 95       	ret
		}
		else if(direction==OUT)
 100:	41 30       	cpi	r20, 0x01	; 1
 102:	09 f0       	breq	.+2      	; 0x106 <DIO_init+0x80>
 104:	4a c0       	rjmp	.+148    	; 0x19a <DIO_init+0x114>
		{
			DDRB |= (1<<pinNumber); // pin init. output
 106:	47 b3       	in	r20, 0x17	; 23
 108:	21 e0       	ldi	r18, 0x01	; 1
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	b9 01       	movw	r22, r18
 10e:	02 c0       	rjmp	.+4      	; 0x114 <DIO_init+0x8e>
 110:	66 0f       	add	r22, r22
 112:	77 1f       	adc	r23, r23
 114:	8a 95       	dec	r24
 116:	e2 f7       	brpl	.-8      	; 0x110 <DIO_init+0x8a>
 118:	cb 01       	movw	r24, r22
 11a:	84 2b       	or	r24, r20
 11c:	87 bb       	out	0x17, r24	; 23
 11e:	08 95       	ret
			// Error handling
		}
		break;
		
		case PORT_C:
		if(direction==IN)
 120:	41 11       	cpse	r20, r1
 122:	0e c0       	rjmp	.+28     	; 0x140 <DIO_init+0xba>
		{
			DDRC &= ~(1<<pinNumber); // pin init. input
 124:	44 b3       	in	r20, 0x14	; 20
 126:	21 e0       	ldi	r18, 0x01	; 1
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	b9 01       	movw	r22, r18
 12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_init+0xac>
 12e:	66 0f       	add	r22, r22
 130:	77 1f       	adc	r23, r23
 132:	8a 95       	dec	r24
 134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_init+0xa8>
 136:	cb 01       	movw	r24, r22
 138:	80 95       	com	r24
 13a:	84 23       	and	r24, r20
 13c:	84 bb       	out	0x14, r24	; 20
 13e:	08 95       	ret
		}
		else if(direction==OUT)
 140:	41 30       	cpi	r20, 0x01	; 1
 142:	59 f5       	brne	.+86     	; 0x19a <DIO_init+0x114>
		{
			DDRC |= (1<<pinNumber); // pin init. output
 144:	44 b3       	in	r20, 0x14	; 20
 146:	21 e0       	ldi	r18, 0x01	; 1
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	b9 01       	movw	r22, r18
 14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_init+0xcc>
 14e:	66 0f       	add	r22, r22
 150:	77 1f       	adc	r23, r23
 152:	8a 95       	dec	r24
 154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_init+0xc8>
 156:	cb 01       	movw	r24, r22
 158:	84 2b       	or	r24, r20
 15a:	84 bb       	out	0x14, r24	; 20
 15c:	08 95       	ret
			// Error handling
		}
		break;
		
		case PORT_D:
		if(direction==IN)
 15e:	41 11       	cpse	r20, r1
 160:	0e c0       	rjmp	.+28     	; 0x17e <DIO_init+0xf8>
		{
			DDRD &= ~(1<<pinNumber); // pin init. input
 162:	41 b3       	in	r20, 0x11	; 17
 164:	21 e0       	ldi	r18, 0x01	; 1
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	b9 01       	movw	r22, r18
 16a:	02 c0       	rjmp	.+4      	; 0x170 <DIO_init+0xea>
 16c:	66 0f       	add	r22, r22
 16e:	77 1f       	adc	r23, r23
 170:	8a 95       	dec	r24
 172:	e2 f7       	brpl	.-8      	; 0x16c <DIO_init+0xe6>
 174:	cb 01       	movw	r24, r22
 176:	80 95       	com	r24
 178:	84 23       	and	r24, r20
 17a:	81 bb       	out	0x11, r24	; 17
 17c:	08 95       	ret
		}
		else if(direction==OUT)
 17e:	41 30       	cpi	r20, 0x01	; 1
 180:	61 f4       	brne	.+24     	; 0x19a <DIO_init+0x114>
		{
			DDRD |= (1<<pinNumber); // pin init. output
 182:	41 b3       	in	r20, 0x11	; 17
 184:	21 e0       	ldi	r18, 0x01	; 1
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	b9 01       	movw	r22, r18
 18a:	02 c0       	rjmp	.+4      	; 0x190 <DIO_init+0x10a>
 18c:	66 0f       	add	r22, r22
 18e:	77 1f       	adc	r23, r23
 190:	8a 95       	dec	r24
 192:	e2 f7       	brpl	.-8      	; 0x18c <DIO_init+0x106>
 194:	cb 01       	movw	r24, r22
 196:	84 2b       	or	r24, r20
 198:	81 bb       	out	0x11, r24	; 17
 19a:	08 95       	ret

0000019c <DIO_write>:
	}
	}// Initialize DIO direction

void DIO_write(uint8_t pinNumber, uint8_t portNumber, uint8_t value)
{
	switch(portNumber)
 19c:	62 34       	cpi	r22, 0x42	; 66
 19e:	59 f1       	breq	.+86     	; 0x1f6 <DIO_write+0x5a>
 1a0:	18 f4       	brcc	.+6      	; 0x1a8 <DIO_write+0xc>
 1a2:	61 34       	cpi	r22, 0x41	; 65
 1a4:	41 f0       	breq	.+16     	; 0x1b6 <DIO_write+0x1a>
 1a6:	08 95       	ret
 1a8:	63 34       	cpi	r22, 0x43	; 67
 1aa:	09 f4       	brne	.+2      	; 0x1ae <DIO_write+0x12>
 1ac:	44 c0       	rjmp	.+136    	; 0x236 <DIO_write+0x9a>
 1ae:	64 34       	cpi	r22, 0x44	; 68
 1b0:	09 f4       	brne	.+2      	; 0x1b4 <DIO_write+0x18>
 1b2:	60 c0       	rjmp	.+192    	; 0x274 <DIO_write+0xd8>
 1b4:	08 95       	ret
	{
		case PORT_A:
		if(value== LOW)
 1b6:	41 11       	cpse	r20, r1
 1b8:	0e c0       	rjmp	.+28     	; 0x1d6 <DIO_write+0x3a>
		{
			PORTA &= ~(1<<pinNumber); // write 0
 1ba:	4b b3       	in	r20, 0x1b	; 27
 1bc:	21 e0       	ldi	r18, 0x01	; 1
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	b9 01       	movw	r22, r18
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <DIO_write+0x2c>
 1c4:	66 0f       	add	r22, r22
 1c6:	77 1f       	adc	r23, r23
 1c8:	8a 95       	dec	r24
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <DIO_write+0x28>
 1cc:	cb 01       	movw	r24, r22
 1ce:	80 95       	com	r24
 1d0:	84 23       	and	r24, r20
 1d2:	8b bb       	out	0x1b, r24	; 27
 1d4:	08 95       	ret
		}
		else if(value==HIGH)
 1d6:	41 30       	cpi	r20, 0x01	; 1
 1d8:	09 f0       	breq	.+2      	; 0x1dc <DIO_write+0x40>
 1da:	6a c0       	rjmp	.+212    	; 0x2b0 <DIO_write+0x114>
		{
			PORTA |= (1<<pinNumber); // write 1
 1dc:	4b b3       	in	r20, 0x1b	; 27
 1de:	21 e0       	ldi	r18, 0x01	; 1
 1e0:	30 e0       	ldi	r19, 0x00	; 0
 1e2:	b9 01       	movw	r22, r18
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <DIO_write+0x4e>
 1e6:	66 0f       	add	r22, r22
 1e8:	77 1f       	adc	r23, r23
 1ea:	8a 95       	dec	r24
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <DIO_write+0x4a>
 1ee:	cb 01       	movw	r24, r22
 1f0:	84 2b       	or	r24, r20
 1f2:	8b bb       	out	0x1b, r24	; 27
 1f4:	08 95       	ret
			// Error handling
		}
		break;
		
		case PORT_B:
		if(value== LOW)
 1f6:	41 11       	cpse	r20, r1
 1f8:	0e c0       	rjmp	.+28     	; 0x216 <DIO_write+0x7a>
		{
			PORTB &= ~(1<<pinNumber); // write 0
 1fa:	48 b3       	in	r20, 0x18	; 24
 1fc:	21 e0       	ldi	r18, 0x01	; 1
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	b9 01       	movw	r22, r18
 202:	02 c0       	rjmp	.+4      	; 0x208 <DIO_write+0x6c>
 204:	66 0f       	add	r22, r22
 206:	77 1f       	adc	r23, r23
 208:	8a 95       	dec	r24
 20a:	e2 f7       	brpl	.-8      	; 0x204 <DIO_write+0x68>
 20c:	cb 01       	movw	r24, r22
 20e:	80 95       	com	r24
 210:	84 23       	and	r24, r20
 212:	88 bb       	out	0x18, r24	; 24
 214:	08 95       	ret
		}
		else if(value==HIGH)
 216:	41 30       	cpi	r20, 0x01	; 1
 218:	09 f0       	breq	.+2      	; 0x21c <DIO_write+0x80>
 21a:	4a c0       	rjmp	.+148    	; 0x2b0 <DIO_write+0x114>
		{
			PORTB |= (1<<pinNumber); // write 1
 21c:	48 b3       	in	r20, 0x18	; 24
 21e:	21 e0       	ldi	r18, 0x01	; 1
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	b9 01       	movw	r22, r18
 224:	02 c0       	rjmp	.+4      	; 0x22a <DIO_write+0x8e>
 226:	66 0f       	add	r22, r22
 228:	77 1f       	adc	r23, r23
 22a:	8a 95       	dec	r24
 22c:	e2 f7       	brpl	.-8      	; 0x226 <DIO_write+0x8a>
 22e:	cb 01       	movw	r24, r22
 230:	84 2b       	or	r24, r20
 232:	88 bb       	out	0x18, r24	; 24
 234:	08 95       	ret
			// Error handling
		}
		break;
		
		case PORT_C:
		if(value== LOW)
 236:	41 11       	cpse	r20, r1
 238:	0e c0       	rjmp	.+28     	; 0x256 <DIO_write+0xba>
		{
			PORTC &= ~(1<<pinNumber); // write 0
 23a:	45 b3       	in	r20, 0x15	; 21
 23c:	21 e0       	ldi	r18, 0x01	; 1
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	b9 01       	movw	r22, r18
 242:	02 c0       	rjmp	.+4      	; 0x248 <DIO_write+0xac>
 244:	66 0f       	add	r22, r22
 246:	77 1f       	adc	r23, r23
 248:	8a 95       	dec	r24
 24a:	e2 f7       	brpl	.-8      	; 0x244 <DIO_write+0xa8>
 24c:	cb 01       	movw	r24, r22
 24e:	80 95       	com	r24
 250:	84 23       	and	r24, r20
 252:	85 bb       	out	0x15, r24	; 21
 254:	08 95       	ret
		}
		else if(value==HIGH)
 256:	41 30       	cpi	r20, 0x01	; 1
 258:	59 f5       	brne	.+86     	; 0x2b0 <DIO_write+0x114>
		{
			PORTC |= (1<<pinNumber); // write 1
 25a:	45 b3       	in	r20, 0x15	; 21
 25c:	21 e0       	ldi	r18, 0x01	; 1
 25e:	30 e0       	ldi	r19, 0x00	; 0
 260:	b9 01       	movw	r22, r18
 262:	02 c0       	rjmp	.+4      	; 0x268 <DIO_write+0xcc>
 264:	66 0f       	add	r22, r22
 266:	77 1f       	adc	r23, r23
 268:	8a 95       	dec	r24
 26a:	e2 f7       	brpl	.-8      	; 0x264 <DIO_write+0xc8>
 26c:	cb 01       	movw	r24, r22
 26e:	84 2b       	or	r24, r20
 270:	85 bb       	out	0x15, r24	; 21
 272:	08 95       	ret
			// Error handling
		}
		break;
		
		case PORT_D:
		if(value== LOW)
 274:	41 11       	cpse	r20, r1
 276:	0e c0       	rjmp	.+28     	; 0x294 <DIO_write+0xf8>
		{
			PORTD &= ~(1<<pinNumber); // write 0
 278:	42 b3       	in	r20, 0x12	; 18
 27a:	21 e0       	ldi	r18, 0x01	; 1
 27c:	30 e0       	ldi	r19, 0x00	; 0
 27e:	b9 01       	movw	r22, r18
 280:	02 c0       	rjmp	.+4      	; 0x286 <DIO_write+0xea>
 282:	66 0f       	add	r22, r22
 284:	77 1f       	adc	r23, r23
 286:	8a 95       	dec	r24
 288:	e2 f7       	brpl	.-8      	; 0x282 <DIO_write+0xe6>
 28a:	cb 01       	movw	r24, r22
 28c:	80 95       	com	r24
 28e:	84 23       	and	r24, r20
 290:	82 bb       	out	0x12, r24	; 18
 292:	08 95       	ret
		}
		else if(value==HIGH)
 294:	41 30       	cpi	r20, 0x01	; 1
 296:	61 f4       	brne	.+24     	; 0x2b0 <DIO_write+0x114>
		{
			PORTD |= (1<<pinNumber); // write 1
 298:	42 b3       	in	r20, 0x12	; 18
 29a:	21 e0       	ldi	r18, 0x01	; 1
 29c:	30 e0       	ldi	r19, 0x00	; 0
 29e:	b9 01       	movw	r22, r18
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <DIO_write+0x10a>
 2a2:	66 0f       	add	r22, r22
 2a4:	77 1f       	adc	r23, r23
 2a6:	8a 95       	dec	r24
 2a8:	e2 f7       	brpl	.-8      	; 0x2a2 <DIO_write+0x106>
 2aa:	cb 01       	movw	r24, r22
 2ac:	84 2b       	or	r24, r20
 2ae:	82 bb       	out	0x12, r24	; 18
 2b0:	08 95       	ret

000002b2 <DIO_read>:
	} // Write data to DIO


void DIO_read(uint8_t pinNumber, uint8_t portNumber, uint8_t *value)
{
  switch(portNumber)
 2b2:	62 34       	cpi	r22, 0x42	; 66
 2b4:	09 f1       	breq	.+66     	; 0x2f8 <DIO_read+0x46>
 2b6:	18 f4       	brcc	.+6      	; 0x2be <DIO_read+0xc>
 2b8:	61 34       	cpi	r22, 0x41	; 65
 2ba:	39 f0       	breq	.+14     	; 0x2ca <DIO_read+0x18>
 2bc:	08 95       	ret
 2be:	63 34       	cpi	r22, 0x43	; 67
 2c0:	91 f1       	breq	.+100    	; 0x326 <DIO_read+0x74>
 2c2:	64 34       	cpi	r22, 0x44	; 68
 2c4:	09 f4       	brne	.+2      	; 0x2c8 <DIO_read+0x16>
 2c6:	46 c0       	rjmp	.+140    	; 0x354 <DIO_read+0xa2>
 2c8:	08 95       	ret
  {
	case PORT_A:
	     *value= (PINA & (1<<pinNumber))>>pinNumber; //get state read bit
 2ca:	99 b3       	in	r25, 0x19	; 25
 2cc:	21 e0       	ldi	r18, 0x01	; 1
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 2d0:	b9 01       	movw	r22, r18
 2d2:	08 2e       	mov	r0, r24
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <DIO_read+0x28>
 2d6:	66 0f       	add	r22, r22
 2d8:	77 1f       	adc	r23, r23
 2da:	0a 94       	dec	r0
 2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <DIO_read+0x24>
 2de:	29 2f       	mov	r18, r25
 2e0:	30 e0       	ldi	r19, 0x00	; 0
 2e2:	26 23       	and	r18, r22
 2e4:	37 23       	and	r19, r23
 2e6:	b9 01       	movw	r22, r18
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <DIO_read+0x3c>
 2ea:	75 95       	asr	r23
 2ec:	67 95       	ror	r22
 2ee:	8a 95       	dec	r24
 2f0:	e2 f7       	brpl	.-8      	; 0x2ea <DIO_read+0x38>
 2f2:	fa 01       	movw	r30, r20
 2f4:	60 83       	st	Z, r22
		 break;  	
 2f6:	08 95       	ret
	case PORT_B:
	    *value= (PINB & (1<<pinNumber))>>pinNumber; //get state read bit
 2f8:	96 b3       	in	r25, 0x16	; 22
 2fa:	21 e0       	ldi	r18, 0x01	; 1
 2fc:	30 e0       	ldi	r19, 0x00	; 0
 2fe:	b9 01       	movw	r22, r18
 300:	08 2e       	mov	r0, r24
 302:	02 c0       	rjmp	.+4      	; 0x308 <DIO_read+0x56>
 304:	66 0f       	add	r22, r22
 306:	77 1f       	adc	r23, r23
 308:	0a 94       	dec	r0
 30a:	e2 f7       	brpl	.-8      	; 0x304 <DIO_read+0x52>
 30c:	29 2f       	mov	r18, r25
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	26 23       	and	r18, r22
 312:	37 23       	and	r19, r23
 314:	b9 01       	movw	r22, r18
 316:	02 c0       	rjmp	.+4      	; 0x31c <DIO_read+0x6a>
 318:	75 95       	asr	r23
 31a:	67 95       	ror	r22
 31c:	8a 95       	dec	r24
 31e:	e2 f7       	brpl	.-8      	; 0x318 <DIO_read+0x66>
 320:	fa 01       	movw	r30, r20
 322:	60 83       	st	Z, r22
	    break;
 324:	08 95       	ret
	case PORT_C:
	    *value= (PINC & (1<<pinNumber))>>pinNumber; //get state read bit
 326:	93 b3       	in	r25, 0x13	; 19
 328:	21 e0       	ldi	r18, 0x01	; 1
 32a:	30 e0       	ldi	r19, 0x00	; 0
 32c:	b9 01       	movw	r22, r18
 32e:	08 2e       	mov	r0, r24
 330:	02 c0       	rjmp	.+4      	; 0x336 <DIO_read+0x84>
 332:	66 0f       	add	r22, r22
 334:	77 1f       	adc	r23, r23
 336:	0a 94       	dec	r0
 338:	e2 f7       	brpl	.-8      	; 0x332 <DIO_read+0x80>
 33a:	29 2f       	mov	r18, r25
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	26 23       	and	r18, r22
 340:	37 23       	and	r19, r23
 342:	b9 01       	movw	r22, r18
 344:	02 c0       	rjmp	.+4      	; 0x34a <DIO_read+0x98>
 346:	75 95       	asr	r23
 348:	67 95       	ror	r22
 34a:	8a 95       	dec	r24
 34c:	e2 f7       	brpl	.-8      	; 0x346 <DIO_read+0x94>
 34e:	fa 01       	movw	r30, r20
 350:	60 83       	st	Z, r22
	    break;
 352:	08 95       	ret
	case PORT_D:
	    *value= (PIND & (1<<pinNumber))>>pinNumber; //get state read bit
 354:	90 b3       	in	r25, 0x10	; 16
 356:	21 e0       	ldi	r18, 0x01	; 1
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	b9 01       	movw	r22, r18
 35c:	08 2e       	mov	r0, r24
 35e:	02 c0       	rjmp	.+4      	; 0x364 <DIO_read+0xb2>
 360:	66 0f       	add	r22, r22
 362:	77 1f       	adc	r23, r23
 364:	0a 94       	dec	r0
 366:	e2 f7       	brpl	.-8      	; 0x360 <DIO_read+0xae>
 368:	29 2f       	mov	r18, r25
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	26 23       	and	r18, r22
 36e:	37 23       	and	r19, r23
 370:	b9 01       	movw	r22, r18
 372:	02 c0       	rjmp	.+4      	; 0x378 <DIO_read+0xc6>
 374:	75 95       	asr	r23
 376:	67 95       	ror	r22
 378:	8a 95       	dec	r24
 37a:	e2 f7       	brpl	.-8      	; 0x374 <DIO_read+0xc2>
 37c:	fa 01       	movw	r30, r20
 37e:	60 83       	st	Z, r22
 380:	08 95       	ret

00000382 <LED_init>:




void LED_init(uint8_t ledPort, uint8_t ledPin)
{
 382:	98 2f       	mov	r25, r24
 384:	86 2f       	mov	r24, r22
	DIO_init(ledPin, ledPort, OUT);	
 386:	41 e0       	ldi	r20, 0x01	; 1
 388:	69 2f       	mov	r22, r25
 38a:	0e 94 43 00 	call	0x86	; 0x86 <DIO_init>
 38e:	08 95       	ret

00000390 <LED_on>:
}

void LED_on(uint8_t ledPort, uint8_t ledPin)
{
 390:	98 2f       	mov	r25, r24
 392:	86 2f       	mov	r24, r22
	DIO_write(ledPin, ledPort, HIGH);
 394:	41 e0       	ldi	r20, 0x01	; 1
 396:	69 2f       	mov	r22, r25
 398:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_write>
 39c:	08 95       	ret

0000039e <LED_off>:
}
void LED_off(uint8_t ledPort, uint8_t ledPin)
{
 39e:	98 2f       	mov	r25, r24
 3a0:	86 2f       	mov	r24, r22
    DIO_write(ledPin, ledPort, LOW);
 3a2:	40 e0       	ldi	r20, 0x00	; 0
 3a4:	69 2f       	mov	r22, r25
 3a6:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_write>
 3aa:	08 95       	ret

000003ac <main>:
#include "LED/led.h"
#include "Button/button.h"


int main(void)
{
 3ac:	cf 93       	push	r28
 3ae:	df 93       	push	r29
 3b0:	1f 92       	push	r1
 3b2:	cd b7       	in	r28, 0x3d	; 61
 3b4:	de b7       	in	r29, 0x3e	; 62
   // LEDs init  
   LED_init(led_1_port, led_1_pin); 
 3b6:	64 e0       	ldi	r22, 0x04	; 4
 3b8:	81 e4       	ldi	r24, 0x41	; 65
 3ba:	0e 94 c1 01 	call	0x382	; 0x382 <LED_init>
   LED_init(led_2_port, led_2_pin);  
 3be:	63 e0       	ldi	r22, 0x03	; 3
 3c0:	81 e4       	ldi	r24, 0x41	; 65
 3c2:	0e 94 c1 01 	call	0x382	; 0x382 <LED_init>
   LED_init(led_3_port, led_3_pin); 
 3c6:	62 e0       	ldi	r22, 0x02	; 2
 3c8:	81 e4       	ldi	r24, 0x41	; 65
 3ca:	0e 94 c1 01 	call	0x382	; 0x382 <LED_init>
   LED_init(led_4_port, led_4_pin);  
 3ce:	61 e0       	ldi	r22, 0x01	; 1
 3d0:	81 e4       	ldi	r24, 0x41	; 65
 3d2:	0e 94 c1 01 	call	0x382	; 0x382 <LED_init>
   // button init  
   Button_init(BUTTON_1_PORT, BUTTON_1_PIN); 
 3d6:	61 e0       	ldi	r22, 0x01	; 1
 3d8:	83 e4       	ldi	r24, 0x43	; 67
 3da:	0e 94 36 00 	call	0x6c	; 0x6c <Button_init>
  
    while (1) 
    {
		uint8_t buttonstate= LOW;
 3de:	19 82       	std	Y+1, r1	; 0x01
		// Initially, all LEDs are OFF
		LED_off(led_1_port, led_1_pin);
 3e0:	64 e0       	ldi	r22, 0x04	; 4
 3e2:	81 e4       	ldi	r24, 0x41	; 65
 3e4:	0e 94 cf 01 	call	0x39e	; 0x39e <LED_off>
		LED_off(led_2_port, led_2_pin);
 3e8:	63 e0       	ldi	r22, 0x03	; 3
 3ea:	81 e4       	ldi	r24, 0x41	; 65
 3ec:	0e 94 cf 01 	call	0x39e	; 0x39e <LED_off>
		LED_off(led_3_port, led_3_pin);
 3f0:	62 e0       	ldi	r22, 0x02	; 2
 3f2:	81 e4       	ldi	r24, 0x41	; 65
 3f4:	0e 94 cf 01 	call	0x39e	; 0x39e <LED_off>
		LED_off(led_4_port, led_4_pin);
 3f8:	61 e0       	ldi	r22, 0x01	; 1
 3fa:	81 e4       	ldi	r24, 0x41	; 65
 3fc:	0e 94 cf 01 	call	0x39e	; 0x39e <LED_off>
	       
	        Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);	
 400:	ae 01       	movw	r20, r28
 402:	4f 5f       	subi	r20, 0xFF	; 255
 404:	5f 4f       	sbci	r21, 0xFF	; 255
 406:	61 e0       	ldi	r22, 0x01	; 1
 408:	83 e4       	ldi	r24, 0x43	; 67
 40a:	0e 94 3d 00 	call	0x7a	; 0x7a <Button_read>
			while(buttonstate == LOW)  {Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);}
 40e:	07 c0       	rjmp	.+14     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 410:	ae 01       	movw	r20, r28
 412:	4f 5f       	subi	r20, 0xFF	; 255
 414:	5f 4f       	sbci	r21, 0xFF	; 255
 416:	61 e0       	ldi	r22, 0x01	; 1
 418:	83 e4       	ldi	r24, 0x43	; 67
 41a:	0e 94 3d 00 	call	0x7a	; 0x7a <Button_read>
 41e:	89 81       	ldd	r24, Y+1	; 0x01
 420:	88 23       	and	r24, r24
 422:	b1 f3       	breq	.-20     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 424:	0b c0       	rjmp	.+22     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
			 // Once BUTTON1 is pressed, LED1 will be ON
			 // Press 1 (ON, OFF, OFF, OFF)
			while (buttonstate == HIGH)	
			 {
			  LED_on(led_1_port, led_1_pin);
 426:	64 e0       	ldi	r22, 0x04	; 4
 428:	81 e4       	ldi	r24, 0x41	; 65
 42a:	0e 94 c8 01 	call	0x390	; 0x390 <LED_on>
			  Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);		
 42e:	ae 01       	movw	r20, r28
 430:	4f 5f       	subi	r20, 0xFF	; 255
 432:	5f 4f       	sbci	r21, 0xFF	; 255
 434:	61 e0       	ldi	r22, 0x01	; 1
 436:	83 e4       	ldi	r24, 0x43	; 67
 438:	0e 94 3d 00 	call	0x7a	; 0x7a <Button_read>
	       
	        Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);	
			while(buttonstate == LOW)  {Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);}
			 // Once BUTTON1 is pressed, LED1 will be ON
			 // Press 1 (ON, OFF, OFF, OFF)
			while (buttonstate == HIGH)	
 43c:	89 81       	ldd	r24, Y+1	; 0x01
 43e:	81 30       	cpi	r24, 0x01	; 1
 440:	91 f3       	breq	.-28     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 442:	07 c0       	rjmp	.+14     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
			 {
			  LED_on(led_1_port, led_1_pin);
			  Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);		
			 }
		    while(buttonstate == LOW) { Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);	 }
 444:	ae 01       	movw	r20, r28
 446:	4f 5f       	subi	r20, 0xFF	; 255
 448:	5f 4f       	sbci	r21, 0xFF	; 255
 44a:	61 e0       	ldi	r22, 0x01	; 1
 44c:	83 e4       	ldi	r24, 0x43	; 67
 44e:	0e 94 3d 00 	call	0x7a	; 0x7a <Button_read>
 452:	89 81       	ldd	r24, Y+1	; 0x01
 454:	88 23       	and	r24, r24
 456:	b1 f3       	breq	.-20     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 458:	0b c0       	rjmp	.+22     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
		    // Press 2 (ON, ON, OFF, OFF)
			while (buttonstate == HIGH)
		     {
			    LED_on(led_2_port, led_2_pin);
 45a:	63 e0       	ldi	r22, 0x03	; 3
 45c:	81 e4       	ldi	r24, 0x41	; 65
 45e:	0e 94 c8 01 	call	0x390	; 0x390 <LED_on>
			    Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);
 462:	ae 01       	movw	r20, r28
 464:	4f 5f       	subi	r20, 0xFF	; 255
 466:	5f 4f       	sbci	r21, 0xFF	; 255
 468:	61 e0       	ldi	r22, 0x01	; 1
 46a:	83 e4       	ldi	r24, 0x43	; 67
 46c:	0e 94 3d 00 	call	0x7a	; 0x7a <Button_read>
			  LED_on(led_1_port, led_1_pin);
			  Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);		
			 }
		    while(buttonstate == LOW) { Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);	 }
		    // Press 2 (ON, ON, OFF, OFF)
			while (buttonstate == HIGH)
 470:	89 81       	ldd	r24, Y+1	; 0x01
 472:	81 30       	cpi	r24, 0x01	; 1
 474:	91 f3       	breq	.-28     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 476:	07 c0       	rjmp	.+14     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
		     {
			    LED_on(led_2_port, led_2_pin);
			    Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);
		     }
			while(buttonstate == LOW) { Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);	 }
 478:	ae 01       	movw	r20, r28
 47a:	4f 5f       	subi	r20, 0xFF	; 255
 47c:	5f 4f       	sbci	r21, 0xFF	; 255
 47e:	61 e0       	ldi	r22, 0x01	; 1
 480:	83 e4       	ldi	r24, 0x43	; 67
 482:	0e 94 3d 00 	call	0x7a	; 0x7a <Button_read>
 486:	89 81       	ldd	r24, Y+1	; 0x01
 488:	88 23       	and	r24, r24
 48a:	b1 f3       	breq	.-20     	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 48c:	0b c0       	rjmp	.+22     	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
			// Press 3 (ON, ON, ON, OFF)
			while (buttonstate == HIGH)
			 {
				LED_on(led_3_port, led_3_pin);
 48e:	62 e0       	ldi	r22, 0x02	; 2
 490:	81 e4       	ldi	r24, 0x41	; 65
 492:	0e 94 c8 01 	call	0x390	; 0x390 <LED_on>
				Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);
 496:	ae 01       	movw	r20, r28
 498:	4f 5f       	subi	r20, 0xFF	; 255
 49a:	5f 4f       	sbci	r21, 0xFF	; 255
 49c:	61 e0       	ldi	r22, 0x01	; 1
 49e:	83 e4       	ldi	r24, 0x43	; 67
 4a0:	0e 94 3d 00 	call	0x7a	; 0x7a <Button_read>
			    LED_on(led_2_port, led_2_pin);
			    Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);
		     }
			while(buttonstate == LOW) { Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);	 }
			// Press 3 (ON, ON, ON, OFF)
			while (buttonstate == HIGH)
 4a4:	89 81       	ldd	r24, Y+1	; 0x01
 4a6:	81 30       	cpi	r24, 0x01	; 1
 4a8:	91 f3       	breq	.-28     	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 4aa:	07 c0       	rjmp	.+14     	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
			 {
				LED_on(led_3_port, led_3_pin);
				Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);
			 }
			while(buttonstate == LOW) { Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);	 }
 4ac:	ae 01       	movw	r20, r28
 4ae:	4f 5f       	subi	r20, 0xFF	; 255
 4b0:	5f 4f       	sbci	r21, 0xFF	; 255
 4b2:	61 e0       	ldi	r22, 0x01	; 1
 4b4:	83 e4       	ldi	r24, 0x43	; 67
 4b6:	0e 94 3d 00 	call	0x7a	; 0x7a <Button_read>
 4ba:	89 81       	ldd	r24, Y+1	; 0x01
 4bc:	88 23       	and	r24, r24
 4be:	b1 f3       	breq	.-20     	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
 4c0:	0b c0       	rjmp	.+22     	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
			// Press 4 (ON, ON, ON, ON)
			while (buttonstate == HIGH)
			  {
				  LED_on(led_4_port, led_4_pin);
 4c2:	61 e0       	ldi	r22, 0x01	; 1
 4c4:	81 e4       	ldi	r24, 0x41	; 65
 4c6:	0e 94 c8 01 	call	0x390	; 0x390 <LED_on>
				  Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);
 4ca:	ae 01       	movw	r20, r28
 4cc:	4f 5f       	subi	r20, 0xFF	; 255
 4ce:	5f 4f       	sbci	r21, 0xFF	; 255
 4d0:	61 e0       	ldi	r22, 0x01	; 1
 4d2:	83 e4       	ldi	r24, 0x43	; 67
 4d4:	0e 94 3d 00 	call	0x7a	; 0x7a <Button_read>
				LED_on(led_3_port, led_3_pin);
				Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);
			 }
			while(buttonstate == LOW) { Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);	 }
			// Press 4 (ON, ON, ON, ON)
			while (buttonstate == HIGH)
 4d8:	89 81       	ldd	r24, Y+1	; 0x01
 4da:	81 30       	cpi	r24, 0x01	; 1
 4dc:	91 f3       	breq	.-28     	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
 4de:	07 c0       	rjmp	.+14     	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
			  {
				  LED_on(led_4_port, led_4_pin);
				  Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);
			  }
			while(buttonstate == LOW) { Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);	 }
 4e0:	ae 01       	movw	r20, r28
 4e2:	4f 5f       	subi	r20, 0xFF	; 255
 4e4:	5f 4f       	sbci	r21, 0xFF	; 255
 4e6:	61 e0       	ldi	r22, 0x01	; 1
 4e8:	83 e4       	ldi	r24, 0x43	; 67
 4ea:	0e 94 3d 00 	call	0x7a	; 0x7a <Button_read>
 4ee:	89 81       	ldd	r24, Y+1	; 0x01
 4f0:	88 23       	and	r24, r24
 4f2:	b1 f3       	breq	.-20     	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
 4f4:	0b c0       	rjmp	.+22     	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
			// At the fifth press, LED1 will changed to be OFF
			// Press 5 (OFF, ON, ON, ON)
			while (buttonstate == HIGH)
			{
				LED_off(led_1_port, led_1_pin);
 4f6:	64 e0       	ldi	r22, 0x04	; 4
 4f8:	81 e4       	ldi	r24, 0x41	; 65
 4fa:	0e 94 cf 01 	call	0x39e	; 0x39e <LED_off>
				Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);
 4fe:	ae 01       	movw	r20, r28
 500:	4f 5f       	subi	r20, 0xFF	; 255
 502:	5f 4f       	sbci	r21, 0xFF	; 255
 504:	61 e0       	ldi	r22, 0x01	; 1
 506:	83 e4       	ldi	r24, 0x43	; 67
 508:	0e 94 3d 00 	call	0x7a	; 0x7a <Button_read>
				  Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);
			  }
			while(buttonstate == LOW) { Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);	 }
			// At the fifth press, LED1 will changed to be OFF
			// Press 5 (OFF, ON, ON, ON)
			while (buttonstate == HIGH)
 50c:	89 81       	ldd	r24, Y+1	; 0x01
 50e:	81 30       	cpi	r24, 0x01	; 1
 510:	91 f3       	breq	.-28     	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
 512:	07 c0       	rjmp	.+14     	; 0x522 <__EEPROM_REGION_LENGTH__+0x122>
			{
				LED_off(led_1_port, led_1_pin);
				Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);
			}
			while(buttonstate == LOW) { Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);	 }
 514:	ae 01       	movw	r20, r28
 516:	4f 5f       	subi	r20, 0xFF	; 255
 518:	5f 4f       	sbci	r21, 0xFF	; 255
 51a:	61 e0       	ldi	r22, 0x01	; 1
 51c:	83 e4       	ldi	r24, 0x43	; 67
 51e:	0e 94 3d 00 	call	0x7a	; 0x7a <Button_read>
 522:	89 81       	ldd	r24, Y+1	; 0x01
 524:	88 23       	and	r24, r24
 526:	b1 f3       	breq	.-20     	; 0x514 <__EEPROM_REGION_LENGTH__+0x114>
 528:	0b c0       	rjmp	.+22     	; 0x540 <__EEPROM_REGION_LENGTH__+0x140>
			// Press 6 (OFF, OFF, ON, ON)
			while (buttonstate == HIGH)
			{
				LED_off(led_2_port, led_2_pin);
 52a:	63 e0       	ldi	r22, 0x03	; 3
 52c:	81 e4       	ldi	r24, 0x41	; 65
 52e:	0e 94 cf 01 	call	0x39e	; 0x39e <LED_off>
				Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);
 532:	ae 01       	movw	r20, r28
 534:	4f 5f       	subi	r20, 0xFF	; 255
 536:	5f 4f       	sbci	r21, 0xFF	; 255
 538:	61 e0       	ldi	r22, 0x01	; 1
 53a:	83 e4       	ldi	r24, 0x43	; 67
 53c:	0e 94 3d 00 	call	0x7a	; 0x7a <Button_read>
				LED_off(led_1_port, led_1_pin);
				Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);
			}
			while(buttonstate == LOW) { Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);	 }
			// Press 6 (OFF, OFF, ON, ON)
			while (buttonstate == HIGH)
 540:	89 81       	ldd	r24, Y+1	; 0x01
 542:	81 30       	cpi	r24, 0x01	; 1
 544:	91 f3       	breq	.-28     	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
 546:	07 c0       	rjmp	.+14     	; 0x556 <__EEPROM_REGION_LENGTH__+0x156>
			{
				LED_off(led_2_port, led_2_pin);
				Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);
			}
			while(buttonstate == LOW) { Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);	 }
 548:	ae 01       	movw	r20, r28
 54a:	4f 5f       	subi	r20, 0xFF	; 255
 54c:	5f 4f       	sbci	r21, 0xFF	; 255
 54e:	61 e0       	ldi	r22, 0x01	; 1
 550:	83 e4       	ldi	r24, 0x43	; 67
 552:	0e 94 3d 00 	call	0x7a	; 0x7a <Button_read>
 556:	89 81       	ldd	r24, Y+1	; 0x01
 558:	88 23       	and	r24, r24
 55a:	b1 f3       	breq	.-20     	; 0x548 <__EEPROM_REGION_LENGTH__+0x148>
 55c:	0b c0       	rjmp	.+22     	; 0x574 <__EEPROM_REGION_LENGTH__+0x174>
			// Press 7 (OFF, OFF, OFF, ON)
			while (buttonstate == HIGH)
			{
				LED_off(led_3_port, led_3_pin);
 55e:	62 e0       	ldi	r22, 0x02	; 2
 560:	81 e4       	ldi	r24, 0x41	; 65
 562:	0e 94 cf 01 	call	0x39e	; 0x39e <LED_off>
				Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);
 566:	ae 01       	movw	r20, r28
 568:	4f 5f       	subi	r20, 0xFF	; 255
 56a:	5f 4f       	sbci	r21, 0xFF	; 255
 56c:	61 e0       	ldi	r22, 0x01	; 1
 56e:	83 e4       	ldi	r24, 0x43	; 67
 570:	0e 94 3d 00 	call	0x7a	; 0x7a <Button_read>
				LED_off(led_2_port, led_2_pin);
				Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);
			}
			while(buttonstate == LOW) { Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);	 }
			// Press 7 (OFF, OFF, OFF, ON)
			while (buttonstate == HIGH)
 574:	89 81       	ldd	r24, Y+1	; 0x01
 576:	81 30       	cpi	r24, 0x01	; 1
 578:	91 f3       	breq	.-28     	; 0x55e <__EEPROM_REGION_LENGTH__+0x15e>
 57a:	07 c0       	rjmp	.+14     	; 0x58a <__EEPROM_REGION_LENGTH__+0x18a>
			{
				LED_off(led_3_port, led_3_pin);
				Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);
			}
			while(buttonstate == LOW) { Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);	 }
 57c:	ae 01       	movw	r20, r28
 57e:	4f 5f       	subi	r20, 0xFF	; 255
 580:	5f 4f       	sbci	r21, 0xFF	; 255
 582:	61 e0       	ldi	r22, 0x01	; 1
 584:	83 e4       	ldi	r24, 0x43	; 67
 586:	0e 94 3d 00 	call	0x7a	; 0x7a <Button_read>
 58a:	89 81       	ldd	r24, Y+1	; 0x01
 58c:	88 23       	and	r24, r24
 58e:	b1 f3       	breq	.-20     	; 0x57c <__EEPROM_REGION_LENGTH__+0x17c>
 590:	0b c0       	rjmp	.+22     	; 0x5a8 <__EEPROM_REGION_LENGTH__+0x1a8>
			// Press 8 (OFF, OFF, OFF, OFF)
			while (buttonstate == HIGH)
			{
				LED_off(led_4_port, led_4_pin);
 592:	61 e0       	ldi	r22, 0x01	; 1
 594:	81 e4       	ldi	r24, 0x41	; 65
 596:	0e 94 cf 01 	call	0x39e	; 0x39e <LED_off>
				Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);
 59a:	ae 01       	movw	r20, r28
 59c:	4f 5f       	subi	r20, 0xFF	; 255
 59e:	5f 4f       	sbci	r21, 0xFF	; 255
 5a0:	61 e0       	ldi	r22, 0x01	; 1
 5a2:	83 e4       	ldi	r24, 0x43	; 67
 5a4:	0e 94 3d 00 	call	0x7a	; 0x7a <Button_read>
				LED_off(led_3_port, led_3_pin);
				Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);
			}
			while(buttonstate == LOW) { Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);	 }
			// Press 8 (OFF, OFF, OFF, OFF)
			while (buttonstate == HIGH)
 5a8:	89 81       	ldd	r24, Y+1	; 0x01
 5aa:	81 30       	cpi	r24, 0x01	; 1
 5ac:	91 f3       	breq	.-28     	; 0x592 <__EEPROM_REGION_LENGTH__+0x192>
 5ae:	17 cf       	rjmp	.-466    	; 0x3de <main+0x32>

000005b0 <_exit>:
 5b0:	f8 94       	cli

000005b2 <__stop_program>:
 5b2:	ff cf       	rjmp	.-2      	; 0x5b2 <__stop_program>
