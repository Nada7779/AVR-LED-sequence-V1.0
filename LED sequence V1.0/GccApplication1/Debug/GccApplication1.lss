
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000061a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000061a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000064c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  00000688  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000dc1  00000000  00000000  00000758  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000072a  00000000  00000000  00001519  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006b4  00000000  00000000  00001c43  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000124  00000000  00000000  000022f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b7  00000000  00000000  0000241c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000772  00000000  00000000  000027d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00002f45  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 5e 01 	call	0x2bc	; 0x2bc <main>
  64:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <APP_init>:
 */ 
#include "application.h"
void APP_init(void)
{
	// LEDs init
	LED_init(led_1_port, led_1_pin);
  6c:	64 e0       	ldi	r22, 0x04	; 4
  6e:	81 e4       	ldi	r24, 0x41	; 65
  70:	0e 94 49 01 	call	0x292	; 0x292 <LED_init>
	LED_init(led_2_port, led_2_pin);
  74:	63 e0       	ldi	r22, 0x03	; 3
  76:	81 e4       	ldi	r24, 0x41	; 65
  78:	0e 94 49 01 	call	0x292	; 0x292 <LED_init>
	LED_init(led_3_port, led_3_pin);
  7c:	62 e0       	ldi	r22, 0x02	; 2
  7e:	81 e4       	ldi	r24, 0x41	; 65
  80:	0e 94 49 01 	call	0x292	; 0x292 <LED_init>
	LED_init(led_4_port, led_4_pin);
  84:	61 e0       	ldi	r22, 0x01	; 1
  86:	81 e4       	ldi	r24, 0x41	; 65
  88:	0e 94 49 01 	call	0x292	; 0x292 <LED_init>
	// button init
	Button_init(BUTTON_1_PORT, BUTTON_1_PIN);
  8c:	61 e0       	ldi	r22, 0x01	; 1
  8e:	83 e4       	ldi	r24, 0x43	; 67
  90:	0e 94 3c 01 	call	0x278	; 0x278 <Button_init>
  94:	08 95       	ret

00000096 <APP_start>:
}
void APP_start(void)
	{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	1f 92       	push	r1
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62
		uint8_t buttonstate= LOW;
  a0:	19 82       	std	Y+1, r1	; 0x01
		// Initially, all LEDs are OFF
		LED_off(led_1_port, led_1_pin);
  a2:	64 e0       	ldi	r22, 0x04	; 4
  a4:	81 e4       	ldi	r24, 0x41	; 65
  a6:	0e 94 57 01 	call	0x2ae	; 0x2ae <LED_off>
		LED_off(led_2_port, led_2_pin);
  aa:	63 e0       	ldi	r22, 0x03	; 3
  ac:	81 e4       	ldi	r24, 0x41	; 65
  ae:	0e 94 57 01 	call	0x2ae	; 0x2ae <LED_off>
		LED_off(led_3_port, led_3_pin);
  b2:	62 e0       	ldi	r22, 0x02	; 2
  b4:	81 e4       	ldi	r24, 0x41	; 65
  b6:	0e 94 57 01 	call	0x2ae	; 0x2ae <LED_off>
		LED_off(led_4_port, led_4_pin);
  ba:	61 e0       	ldi	r22, 0x01	; 1
  bc:	81 e4       	ldi	r24, 0x41	; 65
  be:	0e 94 57 01 	call	0x2ae	; 0x2ae <LED_off>
		
		Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);
  c2:	ae 01       	movw	r20, r28
  c4:	4f 5f       	subi	r20, 0xFF	; 255
  c6:	5f 4f       	sbci	r21, 0xFF	; 255
  c8:	61 e0       	ldi	r22, 0x01	; 1
  ca:	83 e4       	ldi	r24, 0x43	; 67
  cc:	0e 94 43 01 	call	0x286	; 0x286 <Button_read>
		while(buttonstate == LOW)  {Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);}
  d0:	07 c0       	rjmp	.+14     	; 0xe0 <APP_start+0x4a>
  d2:	ae 01       	movw	r20, r28
  d4:	4f 5f       	subi	r20, 0xFF	; 255
  d6:	5f 4f       	sbci	r21, 0xFF	; 255
  d8:	61 e0       	ldi	r22, 0x01	; 1
  da:	83 e4       	ldi	r24, 0x43	; 67
  dc:	0e 94 43 01 	call	0x286	; 0x286 <Button_read>
  e0:	89 81       	ldd	r24, Y+1	; 0x01
  e2:	88 23       	and	r24, r24
  e4:	b1 f3       	breq	.-20     	; 0xd2 <APP_start+0x3c>
  e6:	0b c0       	rjmp	.+22     	; 0xfe <APP_start+0x68>
		// Once BUTTON1 is pressed, LED1 will be ON
		// Press 1 (ON, OFF, OFF, OFF)
		while (buttonstate == HIGH)
		{
			LED_on(led_1_port, led_1_pin);
  e8:	64 e0       	ldi	r22, 0x04	; 4
  ea:	81 e4       	ldi	r24, 0x41	; 65
  ec:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LED_on>
			Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);
  f0:	ae 01       	movw	r20, r28
  f2:	4f 5f       	subi	r20, 0xFF	; 255
  f4:	5f 4f       	sbci	r21, 0xFF	; 255
  f6:	61 e0       	ldi	r22, 0x01	; 1
  f8:	83 e4       	ldi	r24, 0x43	; 67
  fa:	0e 94 43 01 	call	0x286	; 0x286 <Button_read>
		
		Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);
		while(buttonstate == LOW)  {Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);}
		// Once BUTTON1 is pressed, LED1 will be ON
		// Press 1 (ON, OFF, OFF, OFF)
		while (buttonstate == HIGH)
  fe:	89 81       	ldd	r24, Y+1	; 0x01
 100:	81 30       	cpi	r24, 0x01	; 1
 102:	91 f3       	breq	.-28     	; 0xe8 <APP_start+0x52>
 104:	07 c0       	rjmp	.+14     	; 0x114 <APP_start+0x7e>
		{
			LED_on(led_1_port, led_1_pin);
			Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);
		}
		while(buttonstate == LOW) { Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);	 }
 106:	ae 01       	movw	r20, r28
 108:	4f 5f       	subi	r20, 0xFF	; 255
 10a:	5f 4f       	sbci	r21, 0xFF	; 255
 10c:	61 e0       	ldi	r22, 0x01	; 1
 10e:	83 e4       	ldi	r24, 0x43	; 67
 110:	0e 94 43 01 	call	0x286	; 0x286 <Button_read>
 114:	89 81       	ldd	r24, Y+1	; 0x01
 116:	88 23       	and	r24, r24
 118:	b1 f3       	breq	.-20     	; 0x106 <APP_start+0x70>
 11a:	0b c0       	rjmp	.+22     	; 0x132 <APP_start+0x9c>
		// Press 2 (ON, ON, OFF, OFF)
		while (buttonstate == HIGH)
		{
			LED_on(led_2_port, led_2_pin);
 11c:	63 e0       	ldi	r22, 0x03	; 3
 11e:	81 e4       	ldi	r24, 0x41	; 65
 120:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LED_on>
			Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);
 124:	ae 01       	movw	r20, r28
 126:	4f 5f       	subi	r20, 0xFF	; 255
 128:	5f 4f       	sbci	r21, 0xFF	; 255
 12a:	61 e0       	ldi	r22, 0x01	; 1
 12c:	83 e4       	ldi	r24, 0x43	; 67
 12e:	0e 94 43 01 	call	0x286	; 0x286 <Button_read>
			LED_on(led_1_port, led_1_pin);
			Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);
		}
		while(buttonstate == LOW) { Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);	 }
		// Press 2 (ON, ON, OFF, OFF)
		while (buttonstate == HIGH)
 132:	89 81       	ldd	r24, Y+1	; 0x01
 134:	81 30       	cpi	r24, 0x01	; 1
 136:	91 f3       	breq	.-28     	; 0x11c <APP_start+0x86>
 138:	07 c0       	rjmp	.+14     	; 0x148 <APP_start+0xb2>
		{
			LED_on(led_2_port, led_2_pin);
			Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);
		}
		while(buttonstate == LOW) { Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);	 }
 13a:	ae 01       	movw	r20, r28
 13c:	4f 5f       	subi	r20, 0xFF	; 255
 13e:	5f 4f       	sbci	r21, 0xFF	; 255
 140:	61 e0       	ldi	r22, 0x01	; 1
 142:	83 e4       	ldi	r24, 0x43	; 67
 144:	0e 94 43 01 	call	0x286	; 0x286 <Button_read>
 148:	89 81       	ldd	r24, Y+1	; 0x01
 14a:	88 23       	and	r24, r24
 14c:	b1 f3       	breq	.-20     	; 0x13a <APP_start+0xa4>
 14e:	0b c0       	rjmp	.+22     	; 0x166 <APP_start+0xd0>
		// Press 3 (ON, ON, ON, OFF)
		while (buttonstate == HIGH)
		{
			LED_on(led_3_port, led_3_pin);
 150:	62 e0       	ldi	r22, 0x02	; 2
 152:	81 e4       	ldi	r24, 0x41	; 65
 154:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LED_on>
			Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);
 158:	ae 01       	movw	r20, r28
 15a:	4f 5f       	subi	r20, 0xFF	; 255
 15c:	5f 4f       	sbci	r21, 0xFF	; 255
 15e:	61 e0       	ldi	r22, 0x01	; 1
 160:	83 e4       	ldi	r24, 0x43	; 67
 162:	0e 94 43 01 	call	0x286	; 0x286 <Button_read>
			LED_on(led_2_port, led_2_pin);
			Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);
		}
		while(buttonstate == LOW) { Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);	 }
		// Press 3 (ON, ON, ON, OFF)
		while (buttonstate == HIGH)
 166:	89 81       	ldd	r24, Y+1	; 0x01
 168:	81 30       	cpi	r24, 0x01	; 1
 16a:	91 f3       	breq	.-28     	; 0x150 <APP_start+0xba>
 16c:	07 c0       	rjmp	.+14     	; 0x17c <APP_start+0xe6>
		{
			LED_on(led_3_port, led_3_pin);
			Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);
		}
		while(buttonstate == LOW) { Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);	 }
 16e:	ae 01       	movw	r20, r28
 170:	4f 5f       	subi	r20, 0xFF	; 255
 172:	5f 4f       	sbci	r21, 0xFF	; 255
 174:	61 e0       	ldi	r22, 0x01	; 1
 176:	83 e4       	ldi	r24, 0x43	; 67
 178:	0e 94 43 01 	call	0x286	; 0x286 <Button_read>
 17c:	89 81       	ldd	r24, Y+1	; 0x01
 17e:	88 23       	and	r24, r24
 180:	b1 f3       	breq	.-20     	; 0x16e <APP_start+0xd8>
 182:	0b c0       	rjmp	.+22     	; 0x19a <APP_start+0x104>
		// Press 4 (ON, ON, ON, ON)
		while (buttonstate == HIGH)
		{
			LED_on(led_4_port, led_4_pin);
 184:	61 e0       	ldi	r22, 0x01	; 1
 186:	81 e4       	ldi	r24, 0x41	; 65
 188:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LED_on>
			Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);
 18c:	ae 01       	movw	r20, r28
 18e:	4f 5f       	subi	r20, 0xFF	; 255
 190:	5f 4f       	sbci	r21, 0xFF	; 255
 192:	61 e0       	ldi	r22, 0x01	; 1
 194:	83 e4       	ldi	r24, 0x43	; 67
 196:	0e 94 43 01 	call	0x286	; 0x286 <Button_read>
			LED_on(led_3_port, led_3_pin);
			Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);
		}
		while(buttonstate == LOW) { Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);	 }
		// Press 4 (ON, ON, ON, ON)
		while (buttonstate == HIGH)
 19a:	89 81       	ldd	r24, Y+1	; 0x01
 19c:	81 30       	cpi	r24, 0x01	; 1
 19e:	91 f3       	breq	.-28     	; 0x184 <APP_start+0xee>
 1a0:	07 c0       	rjmp	.+14     	; 0x1b0 <APP_start+0x11a>
		{
			LED_on(led_4_port, led_4_pin);
			Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);
		}
		while(buttonstate == LOW) { Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);	 }
 1a2:	ae 01       	movw	r20, r28
 1a4:	4f 5f       	subi	r20, 0xFF	; 255
 1a6:	5f 4f       	sbci	r21, 0xFF	; 255
 1a8:	61 e0       	ldi	r22, 0x01	; 1
 1aa:	83 e4       	ldi	r24, 0x43	; 67
 1ac:	0e 94 43 01 	call	0x286	; 0x286 <Button_read>
 1b0:	89 81       	ldd	r24, Y+1	; 0x01
 1b2:	88 23       	and	r24, r24
 1b4:	b1 f3       	breq	.-20     	; 0x1a2 <APP_start+0x10c>
 1b6:	0b c0       	rjmp	.+22     	; 0x1ce <APP_start+0x138>
		// At the fifth press, LED1 will changed to be OFF
		// Press 5 (OFF, ON, ON, ON)
		while (buttonstate == HIGH)
		{
			LED_off(led_1_port, led_1_pin);
 1b8:	64 e0       	ldi	r22, 0x04	; 4
 1ba:	81 e4       	ldi	r24, 0x41	; 65
 1bc:	0e 94 57 01 	call	0x2ae	; 0x2ae <LED_off>
			Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);
 1c0:	ae 01       	movw	r20, r28
 1c2:	4f 5f       	subi	r20, 0xFF	; 255
 1c4:	5f 4f       	sbci	r21, 0xFF	; 255
 1c6:	61 e0       	ldi	r22, 0x01	; 1
 1c8:	83 e4       	ldi	r24, 0x43	; 67
 1ca:	0e 94 43 01 	call	0x286	; 0x286 <Button_read>
			Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);
		}
		while(buttonstate == LOW) { Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);	 }
		// At the fifth press, LED1 will changed to be OFF
		// Press 5 (OFF, ON, ON, ON)
		while (buttonstate == HIGH)
 1ce:	89 81       	ldd	r24, Y+1	; 0x01
 1d0:	81 30       	cpi	r24, 0x01	; 1
 1d2:	91 f3       	breq	.-28     	; 0x1b8 <APP_start+0x122>
 1d4:	07 c0       	rjmp	.+14     	; 0x1e4 <APP_start+0x14e>
		{
			LED_off(led_1_port, led_1_pin);
			Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);
		}
		while(buttonstate == LOW) { Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);	 }
 1d6:	ae 01       	movw	r20, r28
 1d8:	4f 5f       	subi	r20, 0xFF	; 255
 1da:	5f 4f       	sbci	r21, 0xFF	; 255
 1dc:	61 e0       	ldi	r22, 0x01	; 1
 1de:	83 e4       	ldi	r24, 0x43	; 67
 1e0:	0e 94 43 01 	call	0x286	; 0x286 <Button_read>
 1e4:	89 81       	ldd	r24, Y+1	; 0x01
 1e6:	88 23       	and	r24, r24
 1e8:	b1 f3       	breq	.-20     	; 0x1d6 <APP_start+0x140>
 1ea:	0b c0       	rjmp	.+22     	; 0x202 <APP_start+0x16c>
		// Press 6 (OFF, OFF, ON, ON)
		while (buttonstate == HIGH)
		{
			LED_off(led_2_port, led_2_pin);
 1ec:	63 e0       	ldi	r22, 0x03	; 3
 1ee:	81 e4       	ldi	r24, 0x41	; 65
 1f0:	0e 94 57 01 	call	0x2ae	; 0x2ae <LED_off>
			Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);
 1f4:	ae 01       	movw	r20, r28
 1f6:	4f 5f       	subi	r20, 0xFF	; 255
 1f8:	5f 4f       	sbci	r21, 0xFF	; 255
 1fa:	61 e0       	ldi	r22, 0x01	; 1
 1fc:	83 e4       	ldi	r24, 0x43	; 67
 1fe:	0e 94 43 01 	call	0x286	; 0x286 <Button_read>
			LED_off(led_1_port, led_1_pin);
			Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);
		}
		while(buttonstate == LOW) { Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);	 }
		// Press 6 (OFF, OFF, ON, ON)
		while (buttonstate == HIGH)
 202:	89 81       	ldd	r24, Y+1	; 0x01
 204:	81 30       	cpi	r24, 0x01	; 1
 206:	91 f3       	breq	.-28     	; 0x1ec <APP_start+0x156>
 208:	07 c0       	rjmp	.+14     	; 0x218 <APP_start+0x182>
		{
			LED_off(led_2_port, led_2_pin);
			Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);
		}
		while(buttonstate == LOW) { Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);	 }
 20a:	ae 01       	movw	r20, r28
 20c:	4f 5f       	subi	r20, 0xFF	; 255
 20e:	5f 4f       	sbci	r21, 0xFF	; 255
 210:	61 e0       	ldi	r22, 0x01	; 1
 212:	83 e4       	ldi	r24, 0x43	; 67
 214:	0e 94 43 01 	call	0x286	; 0x286 <Button_read>
 218:	89 81       	ldd	r24, Y+1	; 0x01
 21a:	88 23       	and	r24, r24
 21c:	b1 f3       	breq	.-20     	; 0x20a <APP_start+0x174>
 21e:	0b c0       	rjmp	.+22     	; 0x236 <APP_start+0x1a0>
		// Press 7 (OFF, OFF, OFF, ON)
		while (buttonstate == HIGH)
		{
			LED_off(led_3_port, led_3_pin);
 220:	62 e0       	ldi	r22, 0x02	; 2
 222:	81 e4       	ldi	r24, 0x41	; 65
 224:	0e 94 57 01 	call	0x2ae	; 0x2ae <LED_off>
			Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);
 228:	ae 01       	movw	r20, r28
 22a:	4f 5f       	subi	r20, 0xFF	; 255
 22c:	5f 4f       	sbci	r21, 0xFF	; 255
 22e:	61 e0       	ldi	r22, 0x01	; 1
 230:	83 e4       	ldi	r24, 0x43	; 67
 232:	0e 94 43 01 	call	0x286	; 0x286 <Button_read>
			LED_off(led_2_port, led_2_pin);
			Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);
		}
		while(buttonstate == LOW) { Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);	 }
		// Press 7 (OFF, OFF, OFF, ON)
		while (buttonstate == HIGH)
 236:	89 81       	ldd	r24, Y+1	; 0x01
 238:	81 30       	cpi	r24, 0x01	; 1
 23a:	91 f3       	breq	.-28     	; 0x220 <APP_start+0x18a>
 23c:	07 c0       	rjmp	.+14     	; 0x24c <APP_start+0x1b6>
		{
			LED_off(led_3_port, led_3_pin);
			Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);
		}
		while(buttonstate == LOW) { Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);	 }
 23e:	ae 01       	movw	r20, r28
 240:	4f 5f       	subi	r20, 0xFF	; 255
 242:	5f 4f       	sbci	r21, 0xFF	; 255
 244:	61 e0       	ldi	r22, 0x01	; 1
 246:	83 e4       	ldi	r24, 0x43	; 67
 248:	0e 94 43 01 	call	0x286	; 0x286 <Button_read>
 24c:	89 81       	ldd	r24, Y+1	; 0x01
 24e:	88 23       	and	r24, r24
 250:	b1 f3       	breq	.-20     	; 0x23e <APP_start+0x1a8>
 252:	0b c0       	rjmp	.+22     	; 0x26a <APP_start+0x1d4>
		// Press 8 (OFF, OFF, OFF, OFF)
		while (buttonstate == HIGH)
		{
			LED_off(led_4_port, led_4_pin);
 254:	61 e0       	ldi	r22, 0x01	; 1
 256:	81 e4       	ldi	r24, 0x41	; 65
 258:	0e 94 57 01 	call	0x2ae	; 0x2ae <LED_off>
			Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);
 25c:	ae 01       	movw	r20, r28
 25e:	4f 5f       	subi	r20, 0xFF	; 255
 260:	5f 4f       	sbci	r21, 0xFF	; 255
 262:	61 e0       	ldi	r22, 0x01	; 1
 264:	83 e4       	ldi	r24, 0x43	; 67
 266:	0e 94 43 01 	call	0x286	; 0x286 <Button_read>
			LED_off(led_3_port, led_3_pin);
			Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);
		}
		while(buttonstate == LOW) { Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);	 }
		// Press 8 (OFF, OFF, OFF, OFF)
		while (buttonstate == HIGH)
 26a:	89 81       	ldd	r24, Y+1	; 0x01
 26c:	81 30       	cpi	r24, 0x01	; 1
 26e:	91 f3       	breq	.-28     	; 0x254 <APP_start+0x1be>
		{
			LED_off(led_4_port, led_4_pin);
			Button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);
		}
	}
 270:	0f 90       	pop	r0
 272:	df 91       	pop	r29
 274:	cf 91       	pop	r28
 276:	08 95       	ret

00000278 <Button_init>:

#include "button.h"
 
 // initialize
 void Button_init(uint8_t buttonPort, uint8_t buttonPin) // init button as an input device
 {
 278:	98 2f       	mov	r25, r24
 27a:	86 2f       	mov	r24, r22
	 DIO_init(buttonPin, buttonPort, IN);
 27c:	40 e0       	ldi	r20, 0x00	; 0
 27e:	69 2f       	mov	r22, r25
 280:	0e 94 63 01 	call	0x2c6	; 0x2c6 <DIO_init>
 284:	08 95       	ret

00000286 <Button_read>:
 }

 // button read
 void Button_read(uint8_t buttonPort, uint8_t buttonPin, uint8_t *value)
 {
 286:	98 2f       	mov	r25, r24
 288:	86 2f       	mov	r24, r22
	 DIO_read(buttonPin, buttonPort, value);
 28a:	69 2f       	mov	r22, r25
 28c:	0e 94 79 02 	call	0x4f2	; 0x4f2 <DIO_read>
 290:	08 95       	ret

00000292 <LED_init>:




void LED_init(uint8_t ledPort, uint8_t ledPin)
{
 292:	98 2f       	mov	r25, r24
 294:	86 2f       	mov	r24, r22
	DIO_init(ledPin, ledPort, OUT);	
 296:	41 e0       	ldi	r20, 0x01	; 1
 298:	69 2f       	mov	r22, r25
 29a:	0e 94 63 01 	call	0x2c6	; 0x2c6 <DIO_init>
 29e:	08 95       	ret

000002a0 <LED_on>:
}

void LED_on(uint8_t ledPort, uint8_t ledPin)
{
 2a0:	98 2f       	mov	r25, r24
 2a2:	86 2f       	mov	r24, r22
	DIO_write(ledPin, ledPort, HIGH);
 2a4:	41 e0       	ldi	r20, 0x01	; 1
 2a6:	69 2f       	mov	r22, r25
 2a8:	0e 94 ee 01 	call	0x3dc	; 0x3dc <DIO_write>
 2ac:	08 95       	ret

000002ae <LED_off>:
}
void LED_off(uint8_t ledPort, uint8_t ledPin)
{
 2ae:	98 2f       	mov	r25, r24
 2b0:	86 2f       	mov	r24, r22
    DIO_write(ledPin, ledPort, LOW);
 2b2:	40 e0       	ldi	r20, 0x00	; 0
 2b4:	69 2f       	mov	r22, r25
 2b6:	0e 94 ee 01 	call	0x3dc	; 0x3dc <DIO_write>
 2ba:	08 95       	ret

000002bc <main>:

#include "Application/application.h"

int main(void)
{
	APP_init();
 2bc:	0e 94 36 00 	call	0x6c	; 0x6c <APP_init>
	while (1)
	{
		APP_start();
 2c0:	0e 94 4b 00 	call	0x96	; 0x96 <APP_start>
 2c4:	fd cf       	rjmp	.-6      	; 0x2c0 <main+0x4>

000002c6 <DIO_init>:

// function definitions

void DIO_init(uint8_t pinNumber, uint8_t portNumber, uint8_t direction)
{
	switch(portNumber)
 2c6:	62 34       	cpi	r22, 0x42	; 66
 2c8:	59 f1       	breq	.+86     	; 0x320 <DIO_init+0x5a>
 2ca:	18 f4       	brcc	.+6      	; 0x2d2 <DIO_init+0xc>
 2cc:	61 34       	cpi	r22, 0x41	; 65
 2ce:	41 f0       	breq	.+16     	; 0x2e0 <DIO_init+0x1a>
 2d0:	08 95       	ret
 2d2:	63 34       	cpi	r22, 0x43	; 67
 2d4:	09 f4       	brne	.+2      	; 0x2d8 <DIO_init+0x12>
 2d6:	44 c0       	rjmp	.+136    	; 0x360 <DIO_init+0x9a>
 2d8:	64 34       	cpi	r22, 0x44	; 68
 2da:	09 f4       	brne	.+2      	; 0x2de <DIO_init+0x18>
 2dc:	60 c0       	rjmp	.+192    	; 0x39e <DIO_init+0xd8>
 2de:	08 95       	ret
	{
		case PORT_A: 
		if(direction==IN)
 2e0:	41 11       	cpse	r20, r1
 2e2:	0e c0       	rjmp	.+28     	; 0x300 <DIO_init+0x3a>
		{
			DDRA &= ~(1<<pinNumber); // pin init. input
 2e4:	4a b3       	in	r20, 0x1a	; 26
 2e6:	21 e0       	ldi	r18, 0x01	; 1
 2e8:	30 e0       	ldi	r19, 0x00	; 0
 2ea:	b9 01       	movw	r22, r18
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <DIO_init+0x2c>
 2ee:	66 0f       	add	r22, r22
 2f0:	77 1f       	adc	r23, r23
 2f2:	8a 95       	dec	r24
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <DIO_init+0x28>
 2f6:	cb 01       	movw	r24, r22
 2f8:	80 95       	com	r24
 2fa:	84 23       	and	r24, r20
 2fc:	8a bb       	out	0x1a, r24	; 26
 2fe:	08 95       	ret
	    }
		else if(direction==OUT)
 300:	41 30       	cpi	r20, 0x01	; 1
 302:	09 f0       	breq	.+2      	; 0x306 <DIO_init+0x40>
 304:	6a c0       	rjmp	.+212    	; 0x3da <DIO_init+0x114>
		{
			DDRA |= (1<<pinNumber); // pin init. output
 306:	4a b3       	in	r20, 0x1a	; 26
 308:	21 e0       	ldi	r18, 0x01	; 1
 30a:	30 e0       	ldi	r19, 0x00	; 0
 30c:	b9 01       	movw	r22, r18
 30e:	02 c0       	rjmp	.+4      	; 0x314 <DIO_init+0x4e>
 310:	66 0f       	add	r22, r22
 312:	77 1f       	adc	r23, r23
 314:	8a 95       	dec	r24
 316:	e2 f7       	brpl	.-8      	; 0x310 <DIO_init+0x4a>
 318:	cb 01       	movw	r24, r22
 31a:	84 2b       	or	r24, r20
 31c:	8a bb       	out	0x1a, r24	; 26
 31e:	08 95       	ret
			// Error handling
		}
	    break;
	    
		case PORT_B:
		if(direction==IN)
 320:	41 11       	cpse	r20, r1
 322:	0e c0       	rjmp	.+28     	; 0x340 <DIO_init+0x7a>
		{
			DDRB &= ~(1<<pinNumber); // pin init. input
 324:	47 b3       	in	r20, 0x17	; 23
 326:	21 e0       	ldi	r18, 0x01	; 1
 328:	30 e0       	ldi	r19, 0x00	; 0
 32a:	b9 01       	movw	r22, r18
 32c:	02 c0       	rjmp	.+4      	; 0x332 <DIO_init+0x6c>
 32e:	66 0f       	add	r22, r22
 330:	77 1f       	adc	r23, r23
 332:	8a 95       	dec	r24
 334:	e2 f7       	brpl	.-8      	; 0x32e <DIO_init+0x68>
 336:	cb 01       	movw	r24, r22
 338:	80 95       	com	r24
 33a:	84 23       	and	r24, r20
 33c:	87 bb       	out	0x17, r24	; 23
 33e:	08 95       	ret
		}
		else if(direction==OUT)
 340:	41 30       	cpi	r20, 0x01	; 1
 342:	09 f0       	breq	.+2      	; 0x346 <DIO_init+0x80>
 344:	4a c0       	rjmp	.+148    	; 0x3da <DIO_init+0x114>
		{
			DDRB |= (1<<pinNumber); // pin init. output
 346:	47 b3       	in	r20, 0x17	; 23
 348:	21 e0       	ldi	r18, 0x01	; 1
 34a:	30 e0       	ldi	r19, 0x00	; 0
 34c:	b9 01       	movw	r22, r18
 34e:	02 c0       	rjmp	.+4      	; 0x354 <DIO_init+0x8e>
 350:	66 0f       	add	r22, r22
 352:	77 1f       	adc	r23, r23
 354:	8a 95       	dec	r24
 356:	e2 f7       	brpl	.-8      	; 0x350 <DIO_init+0x8a>
 358:	cb 01       	movw	r24, r22
 35a:	84 2b       	or	r24, r20
 35c:	87 bb       	out	0x17, r24	; 23
 35e:	08 95       	ret
			// Error handling
		}
		break;
		
		case PORT_C:
		if(direction==IN)
 360:	41 11       	cpse	r20, r1
 362:	0e c0       	rjmp	.+28     	; 0x380 <DIO_init+0xba>
		{
			DDRC &= ~(1<<pinNumber); // pin init. input
 364:	44 b3       	in	r20, 0x14	; 20
 366:	21 e0       	ldi	r18, 0x01	; 1
 368:	30 e0       	ldi	r19, 0x00	; 0
 36a:	b9 01       	movw	r22, r18
 36c:	02 c0       	rjmp	.+4      	; 0x372 <DIO_init+0xac>
 36e:	66 0f       	add	r22, r22
 370:	77 1f       	adc	r23, r23
 372:	8a 95       	dec	r24
 374:	e2 f7       	brpl	.-8      	; 0x36e <DIO_init+0xa8>
 376:	cb 01       	movw	r24, r22
 378:	80 95       	com	r24
 37a:	84 23       	and	r24, r20
 37c:	84 bb       	out	0x14, r24	; 20
 37e:	08 95       	ret
		}
		else if(direction==OUT)
 380:	41 30       	cpi	r20, 0x01	; 1
 382:	59 f5       	brne	.+86     	; 0x3da <DIO_init+0x114>
		{
			DDRC |= (1<<pinNumber); // pin init. output
 384:	44 b3       	in	r20, 0x14	; 20
 386:	21 e0       	ldi	r18, 0x01	; 1
 388:	30 e0       	ldi	r19, 0x00	; 0
 38a:	b9 01       	movw	r22, r18
 38c:	02 c0       	rjmp	.+4      	; 0x392 <DIO_init+0xcc>
 38e:	66 0f       	add	r22, r22
 390:	77 1f       	adc	r23, r23
 392:	8a 95       	dec	r24
 394:	e2 f7       	brpl	.-8      	; 0x38e <DIO_init+0xc8>
 396:	cb 01       	movw	r24, r22
 398:	84 2b       	or	r24, r20
 39a:	84 bb       	out	0x14, r24	; 20
 39c:	08 95       	ret
			// Error handling
		}
		break;
		
		case PORT_D:
		if(direction==IN)
 39e:	41 11       	cpse	r20, r1
 3a0:	0e c0       	rjmp	.+28     	; 0x3be <DIO_init+0xf8>
		{
			DDRD &= ~(1<<pinNumber); // pin init. input
 3a2:	41 b3       	in	r20, 0x11	; 17
 3a4:	21 e0       	ldi	r18, 0x01	; 1
 3a6:	30 e0       	ldi	r19, 0x00	; 0
 3a8:	b9 01       	movw	r22, r18
 3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <DIO_init+0xea>
 3ac:	66 0f       	add	r22, r22
 3ae:	77 1f       	adc	r23, r23
 3b0:	8a 95       	dec	r24
 3b2:	e2 f7       	brpl	.-8      	; 0x3ac <DIO_init+0xe6>
 3b4:	cb 01       	movw	r24, r22
 3b6:	80 95       	com	r24
 3b8:	84 23       	and	r24, r20
 3ba:	81 bb       	out	0x11, r24	; 17
 3bc:	08 95       	ret
		}
		else if(direction==OUT)
 3be:	41 30       	cpi	r20, 0x01	; 1
 3c0:	61 f4       	brne	.+24     	; 0x3da <DIO_init+0x114>
		{
			DDRD |= (1<<pinNumber); // pin init. output
 3c2:	41 b3       	in	r20, 0x11	; 17
 3c4:	21 e0       	ldi	r18, 0x01	; 1
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	b9 01       	movw	r22, r18
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <DIO_init+0x10a>
 3cc:	66 0f       	add	r22, r22
 3ce:	77 1f       	adc	r23, r23
 3d0:	8a 95       	dec	r24
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <DIO_init+0x106>
 3d4:	cb 01       	movw	r24, r22
 3d6:	84 2b       	or	r24, r20
 3d8:	81 bb       	out	0x11, r24	; 17
 3da:	08 95       	ret

000003dc <DIO_write>:
	}
	}// Initialize DIO direction

void DIO_write(uint8_t pinNumber, uint8_t portNumber, uint8_t value)
{
	switch(portNumber)
 3dc:	62 34       	cpi	r22, 0x42	; 66
 3de:	59 f1       	breq	.+86     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 3e0:	18 f4       	brcc	.+6      	; 0x3e8 <DIO_write+0xc>
 3e2:	61 34       	cpi	r22, 0x41	; 65
 3e4:	41 f0       	breq	.+16     	; 0x3f6 <DIO_write+0x1a>
 3e6:	08 95       	ret
 3e8:	63 34       	cpi	r22, 0x43	; 67
 3ea:	09 f4       	brne	.+2      	; 0x3ee <DIO_write+0x12>
 3ec:	44 c0       	rjmp	.+136    	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 3ee:	64 34       	cpi	r22, 0x44	; 68
 3f0:	09 f4       	brne	.+2      	; 0x3f4 <DIO_write+0x18>
 3f2:	60 c0       	rjmp	.+192    	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
 3f4:	08 95       	ret
	{
		case PORT_A:
		if(value== LOW)
 3f6:	41 11       	cpse	r20, r1
 3f8:	0e c0       	rjmp	.+28     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
		{
			PORTA &= ~(1<<pinNumber); // write 0
 3fa:	4b b3       	in	r20, 0x1b	; 27
 3fc:	21 e0       	ldi	r18, 0x01	; 1
 3fe:	30 e0       	ldi	r19, 0x00	; 0
 400:	b9 01       	movw	r22, r18
 402:	02 c0       	rjmp	.+4      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 404:	66 0f       	add	r22, r22
 406:	77 1f       	adc	r23, r23
 408:	8a 95       	dec	r24
 40a:	e2 f7       	brpl	.-8      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 40c:	cb 01       	movw	r24, r22
 40e:	80 95       	com	r24
 410:	84 23       	and	r24, r20
 412:	8b bb       	out	0x1b, r24	; 27
 414:	08 95       	ret
		}
		else if(value==HIGH)
 416:	41 30       	cpi	r20, 0x01	; 1
 418:	09 f0       	breq	.+2      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 41a:	6a c0       	rjmp	.+212    	; 0x4f0 <__EEPROM_REGION_LENGTH__+0xf0>
		{
			PORTA |= (1<<pinNumber); // write 1
 41c:	4b b3       	in	r20, 0x1b	; 27
 41e:	21 e0       	ldi	r18, 0x01	; 1
 420:	30 e0       	ldi	r19, 0x00	; 0
 422:	b9 01       	movw	r22, r18
 424:	02 c0       	rjmp	.+4      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 426:	66 0f       	add	r22, r22
 428:	77 1f       	adc	r23, r23
 42a:	8a 95       	dec	r24
 42c:	e2 f7       	brpl	.-8      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 42e:	cb 01       	movw	r24, r22
 430:	84 2b       	or	r24, r20
 432:	8b bb       	out	0x1b, r24	; 27
 434:	08 95       	ret
			// Error handling
		}
		break;
		
		case PORT_B:
		if(value== LOW)
 436:	41 11       	cpse	r20, r1
 438:	0e c0       	rjmp	.+28     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
		{
			PORTB &= ~(1<<pinNumber); // write 0
 43a:	48 b3       	in	r20, 0x18	; 24
 43c:	21 e0       	ldi	r18, 0x01	; 1
 43e:	30 e0       	ldi	r19, 0x00	; 0
 440:	b9 01       	movw	r22, r18
 442:	02 c0       	rjmp	.+4      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 444:	66 0f       	add	r22, r22
 446:	77 1f       	adc	r23, r23
 448:	8a 95       	dec	r24
 44a:	e2 f7       	brpl	.-8      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 44c:	cb 01       	movw	r24, r22
 44e:	80 95       	com	r24
 450:	84 23       	and	r24, r20
 452:	88 bb       	out	0x18, r24	; 24
 454:	08 95       	ret
		}
		else if(value==HIGH)
 456:	41 30       	cpi	r20, 0x01	; 1
 458:	09 f0       	breq	.+2      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 45a:	4a c0       	rjmp	.+148    	; 0x4f0 <__EEPROM_REGION_LENGTH__+0xf0>
		{
			PORTB |= (1<<pinNumber); // write 1
 45c:	48 b3       	in	r20, 0x18	; 24
 45e:	21 e0       	ldi	r18, 0x01	; 1
 460:	30 e0       	ldi	r19, 0x00	; 0
 462:	b9 01       	movw	r22, r18
 464:	02 c0       	rjmp	.+4      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 466:	66 0f       	add	r22, r22
 468:	77 1f       	adc	r23, r23
 46a:	8a 95       	dec	r24
 46c:	e2 f7       	brpl	.-8      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 46e:	cb 01       	movw	r24, r22
 470:	84 2b       	or	r24, r20
 472:	88 bb       	out	0x18, r24	; 24
 474:	08 95       	ret
			// Error handling
		}
		break;
		
		case PORT_C:
		if(value== LOW)
 476:	41 11       	cpse	r20, r1
 478:	0e c0       	rjmp	.+28     	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
		{
			PORTC &= ~(1<<pinNumber); // write 0
 47a:	45 b3       	in	r20, 0x15	; 21
 47c:	21 e0       	ldi	r18, 0x01	; 1
 47e:	30 e0       	ldi	r19, 0x00	; 0
 480:	b9 01       	movw	r22, r18
 482:	02 c0       	rjmp	.+4      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 484:	66 0f       	add	r22, r22
 486:	77 1f       	adc	r23, r23
 488:	8a 95       	dec	r24
 48a:	e2 f7       	brpl	.-8      	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 48c:	cb 01       	movw	r24, r22
 48e:	80 95       	com	r24
 490:	84 23       	and	r24, r20
 492:	85 bb       	out	0x15, r24	; 21
 494:	08 95       	ret
		}
		else if(value==HIGH)
 496:	41 30       	cpi	r20, 0x01	; 1
 498:	59 f5       	brne	.+86     	; 0x4f0 <__EEPROM_REGION_LENGTH__+0xf0>
		{
			PORTC |= (1<<pinNumber); // write 1
 49a:	45 b3       	in	r20, 0x15	; 21
 49c:	21 e0       	ldi	r18, 0x01	; 1
 49e:	30 e0       	ldi	r19, 0x00	; 0
 4a0:	b9 01       	movw	r22, r18
 4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
 4a4:	66 0f       	add	r22, r22
 4a6:	77 1f       	adc	r23, r23
 4a8:	8a 95       	dec	r24
 4aa:	e2 f7       	brpl	.-8      	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
 4ac:	cb 01       	movw	r24, r22
 4ae:	84 2b       	or	r24, r20
 4b0:	85 bb       	out	0x15, r24	; 21
 4b2:	08 95       	ret
			// Error handling
		}
		break;
		
		case PORT_D:
		if(value== LOW)
 4b4:	41 11       	cpse	r20, r1
 4b6:	0e c0       	rjmp	.+28     	; 0x4d4 <__EEPROM_REGION_LENGTH__+0xd4>
		{
			PORTD &= ~(1<<pinNumber); // write 0
 4b8:	42 b3       	in	r20, 0x12	; 18
 4ba:	21 e0       	ldi	r18, 0x01	; 1
 4bc:	30 e0       	ldi	r19, 0x00	; 0
 4be:	b9 01       	movw	r22, r18
 4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
 4c2:	66 0f       	add	r22, r22
 4c4:	77 1f       	adc	r23, r23
 4c6:	8a 95       	dec	r24
 4c8:	e2 f7       	brpl	.-8      	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
 4ca:	cb 01       	movw	r24, r22
 4cc:	80 95       	com	r24
 4ce:	84 23       	and	r24, r20
 4d0:	82 bb       	out	0x12, r24	; 18
 4d2:	08 95       	ret
		}
		else if(value==HIGH)
 4d4:	41 30       	cpi	r20, 0x01	; 1
 4d6:	61 f4       	brne	.+24     	; 0x4f0 <__EEPROM_REGION_LENGTH__+0xf0>
		{
			PORTD |= (1<<pinNumber); // write 1
 4d8:	42 b3       	in	r20, 0x12	; 18
 4da:	21 e0       	ldi	r18, 0x01	; 1
 4dc:	30 e0       	ldi	r19, 0x00	; 0
 4de:	b9 01       	movw	r22, r18
 4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
 4e2:	66 0f       	add	r22, r22
 4e4:	77 1f       	adc	r23, r23
 4e6:	8a 95       	dec	r24
 4e8:	e2 f7       	brpl	.-8      	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
 4ea:	cb 01       	movw	r24, r22
 4ec:	84 2b       	or	r24, r20
 4ee:	82 bb       	out	0x12, r24	; 18
 4f0:	08 95       	ret

000004f2 <DIO_read>:
	} // Write data to DIO


void DIO_read(uint8_t pinNumber, uint8_t portNumber, uint8_t *value)
{
  switch(portNumber)
 4f2:	62 34       	cpi	r22, 0x42	; 66
 4f4:	09 f1       	breq	.+66     	; 0x538 <DIO_read+0x46>
 4f6:	18 f4       	brcc	.+6      	; 0x4fe <DIO_read+0xc>
 4f8:	61 34       	cpi	r22, 0x41	; 65
 4fa:	39 f0       	breq	.+14     	; 0x50a <DIO_read+0x18>
 4fc:	08 95       	ret
 4fe:	63 34       	cpi	r22, 0x43	; 67
 500:	91 f1       	breq	.+100    	; 0x566 <DIO_read+0x74>
 502:	64 34       	cpi	r22, 0x44	; 68
 504:	09 f4       	brne	.+2      	; 0x508 <DIO_read+0x16>
 506:	46 c0       	rjmp	.+140    	; 0x594 <DIO_read+0xa2>
 508:	08 95       	ret
  {
	case PORT_A:
	     *value= (PINA & (1<<pinNumber))>>pinNumber; //get state read bit
 50a:	99 b3       	in	r25, 0x19	; 25
 50c:	21 e0       	ldi	r18, 0x01	; 1
 50e:	30 e0       	ldi	r19, 0x00	; 0
 510:	b9 01       	movw	r22, r18
 512:	08 2e       	mov	r0, r24
 514:	02 c0       	rjmp	.+4      	; 0x51a <DIO_read+0x28>
 516:	66 0f       	add	r22, r22
 518:	77 1f       	adc	r23, r23
 51a:	0a 94       	dec	r0
 51c:	e2 f7       	brpl	.-8      	; 0x516 <DIO_read+0x24>
 51e:	29 2f       	mov	r18, r25
 520:	30 e0       	ldi	r19, 0x00	; 0
 522:	26 23       	and	r18, r22
 524:	37 23       	and	r19, r23
 526:	b9 01       	movw	r22, r18
 528:	02 c0       	rjmp	.+4      	; 0x52e <DIO_read+0x3c>
 52a:	75 95       	asr	r23
 52c:	67 95       	ror	r22
 52e:	8a 95       	dec	r24
 530:	e2 f7       	brpl	.-8      	; 0x52a <DIO_read+0x38>
 532:	fa 01       	movw	r30, r20
 534:	60 83       	st	Z, r22
		 break;  	
 536:	08 95       	ret
	case PORT_B:
	    *value= (PINB & (1<<pinNumber))>>pinNumber; //get state read bit
 538:	96 b3       	in	r25, 0x16	; 22
 53a:	21 e0       	ldi	r18, 0x01	; 1
 53c:	30 e0       	ldi	r19, 0x00	; 0
 53e:	b9 01       	movw	r22, r18
 540:	08 2e       	mov	r0, r24
 542:	02 c0       	rjmp	.+4      	; 0x548 <DIO_read+0x56>
 544:	66 0f       	add	r22, r22
 546:	77 1f       	adc	r23, r23
 548:	0a 94       	dec	r0
 54a:	e2 f7       	brpl	.-8      	; 0x544 <DIO_read+0x52>
 54c:	29 2f       	mov	r18, r25
 54e:	30 e0       	ldi	r19, 0x00	; 0
 550:	26 23       	and	r18, r22
 552:	37 23       	and	r19, r23
 554:	b9 01       	movw	r22, r18
 556:	02 c0       	rjmp	.+4      	; 0x55c <DIO_read+0x6a>
 558:	75 95       	asr	r23
 55a:	67 95       	ror	r22
 55c:	8a 95       	dec	r24
 55e:	e2 f7       	brpl	.-8      	; 0x558 <DIO_read+0x66>
 560:	fa 01       	movw	r30, r20
 562:	60 83       	st	Z, r22
	    break;
 564:	08 95       	ret
	case PORT_C:
	    *value= (PINC & (1<<pinNumber))>>pinNumber; //get state read bit
 566:	93 b3       	in	r25, 0x13	; 19
 568:	21 e0       	ldi	r18, 0x01	; 1
 56a:	30 e0       	ldi	r19, 0x00	; 0
 56c:	b9 01       	movw	r22, r18
 56e:	08 2e       	mov	r0, r24
 570:	02 c0       	rjmp	.+4      	; 0x576 <DIO_read+0x84>
 572:	66 0f       	add	r22, r22
 574:	77 1f       	adc	r23, r23
 576:	0a 94       	dec	r0
 578:	e2 f7       	brpl	.-8      	; 0x572 <DIO_read+0x80>
 57a:	29 2f       	mov	r18, r25
 57c:	30 e0       	ldi	r19, 0x00	; 0
 57e:	26 23       	and	r18, r22
 580:	37 23       	and	r19, r23
 582:	b9 01       	movw	r22, r18
 584:	02 c0       	rjmp	.+4      	; 0x58a <DIO_read+0x98>
 586:	75 95       	asr	r23
 588:	67 95       	ror	r22
 58a:	8a 95       	dec	r24
 58c:	e2 f7       	brpl	.-8      	; 0x586 <DIO_read+0x94>
 58e:	fa 01       	movw	r30, r20
 590:	60 83       	st	Z, r22
	    break;
 592:	08 95       	ret
	case PORT_D:
	    *value= (PIND & (1<<pinNumber))>>pinNumber; //get state read bit
 594:	90 b3       	in	r25, 0x10	; 16
 596:	21 e0       	ldi	r18, 0x01	; 1
 598:	30 e0       	ldi	r19, 0x00	; 0
 59a:	b9 01       	movw	r22, r18
 59c:	08 2e       	mov	r0, r24
 59e:	02 c0       	rjmp	.+4      	; 0x5a4 <DIO_read+0xb2>
 5a0:	66 0f       	add	r22, r22
 5a2:	77 1f       	adc	r23, r23
 5a4:	0a 94       	dec	r0
 5a6:	e2 f7       	brpl	.-8      	; 0x5a0 <DIO_read+0xae>
 5a8:	29 2f       	mov	r18, r25
 5aa:	30 e0       	ldi	r19, 0x00	; 0
 5ac:	26 23       	and	r18, r22
 5ae:	37 23       	and	r19, r23
 5b0:	b9 01       	movw	r22, r18
 5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <DIO_read+0xc6>
 5b4:	75 95       	asr	r23
 5b6:	67 95       	ror	r22
 5b8:	8a 95       	dec	r24
 5ba:	e2 f7       	brpl	.-8      	; 0x5b4 <DIO_read+0xc2>
 5bc:	fa 01       	movw	r30, r20
 5be:	60 83       	st	Z, r22
 5c0:	08 95       	ret

000005c2 <_exit>:
 5c2:	f8 94       	cli

000005c4 <__stop_program>:
 5c4:	ff cf       	rjmp	.-2      	; 0x5c4 <__stop_program>
